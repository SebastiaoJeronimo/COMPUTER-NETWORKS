To run this Dockerfile and build a Docker image, follow these steps:

Save this Dockerfile in a directory on your machine.
Open a terminal and navigate to the directory where you saved the Dockerfile.
Run the command docker build -t my-image . to build the Docker image. Replace my-image with the name you want to give to your Docker image.
After the image has been built, you can run it with the command docker run -it my-image. Replace my-image with the name you gave to your Docker image.  

In summary:

-d is used for detached mode (background).
--name is used to specify a custom name for the container.
-t allocates a pseudo-TTY, and -i allows interaction with the container.
-h sets the hostname for the container.
These commands demonstrate the flexibility of the docker run command in configuring container behavior, such as running in detached mode, specifying a name, allocating a pseudo-TTY, enabling interactive mode, and setting the hostname.

Container Listing:
docker ps
Lists running containers.
docker ps -a
Lists all containers, including those that are stopped or terminated.
Stop and Start Containers:
docker stop <id>

Stops the given container, preserving its saved state.
docker start <id>

(Re)starts the given container from its saved state.
Container Removal:
docker rm -f <id>
Removes the given container, forcefully stopping it if necessary.  

Docker Container Networking:
By default, Docker containers receive a separate networking environment with a private IP address.

Communication with the external world passes through the host system, which acts as a router.

Containers can communicate with each other, but isolation can be achieved by attaching containers to different Docker networks.

Networking Information Retrieval:
docker inspect <id>
Retrieves detailed information about a specific container, including its networking details.
Filtering Networking Information:
The grep command is introduced as a tool to filter and isolate specific information from the output of docker inspect.
Example:
docker inspect <id> | grep IPAddress
Demonstrates how to use docker inspect in combination with grep to specifically obtain the IPAddress of a container.
